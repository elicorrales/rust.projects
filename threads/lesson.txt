  1 fn main() {
  2     std::thread::spawn(||{});
  3     std::thread::spawn(||{});
  4     std::thread::sleep(std::time::Duration::from_millis(1000));
  5 }
---------------------------------------------------------------------
make code less verbose
---------------------------------------------------------------------
  1 use std::thread;
  2
  3 fn main() {
  4     thread::spawn(||{});
  5     thread::spawn(||{});
  6     thread::sleep(std::time::Duration::from_millis(1000));
  7 }

---------------------------------------------------------------------
make code less verbose
---------------------------------------------------------------------
  1 use std::thread;
  2 use std::time::Duration;
  3
  4 fn main() {
  5     thread::spawn(||{});
  6     thread::spawn(||{});
  7     thread::sleep(Duration::from_millis(1000));
  8 }

---------------------------------------------------------------------
-- have threads do something.
-- run this several times and show that sometime main is before, sometimes
after, etc
---------------------------------------------------------------------
  1 use std::thread::spawn;
  2 use std::thread::sleep;
  3 use std::time::Duration;
  4
  5 fn main() {
  6     spawn(||{
  7         println!("Thread 1");
  8     });
  9     spawn(||{
 10         println!("Thread 2");
 11     });
 12     println!("Main thread...");
 13     sleep(Duration::from_millis(500));
 14 }

myuser@L07705EliezerC:~/projects/rust/threads$ cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/threads`
Thread 1
Main thread...
Thread 2
myuser@L07705EliezerC:~/projects/rust/threads$ cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `target/debug/threads`
Main thread...
Thread 2
Thread 1

~

---------------------------------------------------------------------
--run this
---------------------------------------------------------------------

  1 use std::thread::spawn;
  2 use std::thread::sleep;
  3 use std::time::Duration;
  4
  5 fn main() {
  6     println!("");
  7     println!("Main thread starts other threads..");
  8     spawn(||{
  9         sleep(Duration::from_millis(1000));
 10         println!("Thread 1");
 11         println!("");
 12     });
 13     spawn(||{
 14         sleep(Duration::from_millis(500));
 15         println!("Thread 2");
 16         println!("");
 17     });
 18     println!("");
 19     println!("Main thread waiting...");
 20     println!("");
 21     sleep(Duration::from_millis(1200));
 22     println!("");
 23     println!("Main thread done.");
 24 }


---------------------------------------------------------------------
-- next, change the above main thread sleep to 200 and run 
-- it will not give child threads time to print.
---------------------------------------------------------------------


---------------------------------------------------------------------
-- next (below), show how anonymous func def can be assigned to a
variable and use variable to pass to thread
---------------------------------------------------------------------
  1 use std::thread::spawn;
  2 use std::thread::sleep;
  3 use std::time::Duration;
  4
  5 fn main() {
  6
  7     let my_thread1_func = ||{
  8         sleep(Duration::from_millis(1000));
  9         println!("Thread 1");
 10         println!("");
 11     };
 12
 13     let my_thread2_func = ||{
 14         sleep(Duration::from_millis(500));
 15         println!("Thread 2");
 16         println!("");
 17     };
 18
 19     println!("");
 20     println!("Main thread starts other threads..");
 21
 22     spawn(my_thread1_func);
 23     spawn(my_thread2_func);
 24
 25
 26     println!("");
 27     println!("Main thread waiting...");
 28     println!("");
 29     sleep(Duration::from_millis(1200));
 30     println!("");
 31     println!("Main thread done.");
 32 }


---------------------------------------------------------------------
--forget threads, show how closures can be called directly
--and show use of closure parameter
-- BUT we're NOT calling them in threads
--  more on that later


  1 use std::thread::spawn;
  2 use std::thread::sleep;
  3 use std::time::Duration;
  4
  5 fn main() {
  6
  7     let my_thread1_func = |num|{
  8         sleep(Duration::from_millis(1000));
  9         println!("Thread 1");
 10         println!("");
 11     };
 12
 13     let my_thread2_func = |num|{
 14         sleep(Duration::from_millis(500));
 15         println!("Thread {}");
 16         println!("");
 17     };
 18
 21
 22     my_thread1_func(1);
 23     my_thread2_func(2);
 26
 27
 28     println!("");
 29     println!("Main thread waiting...");
 30     println!("");
 31     sleep(Duration::from_millis(1200));
 32     println!("");
 33     println!("Main thread done.");
 34 }


---------------------------------------------------------------------
--next show how closure param means we can re-use the closure
--and remove some code
---------------------------------------------------------------------


 use std::thread::spawn;
  2 use std::thread::sleep;
  3 use std::time::Duration;
  4
  5 fn main() {
  6
  7     let my_thread_func = |num|{
  8         sleep(Duration::from_millis(1000));
  9         println!("Thread {}", num);
 10         println!("");
 11     };
 12
 13     println!("");
 14     println!("Main thread starts other threads..");
 15
 16     my_thread_func(1);
 17     my_thread_func(2);
 20
 21
 22     println!("");
 23     println!("Main thread waiting...");
 24     println!("");
 25     sleep(Duration::from_millis(1200));
 26     println!("");
 27     println!("Main thread done.");
 28 }

---------------------------------------------------------------------
-- show use of closure (anonymous func) able to use extern variable
BUT no threadings.

use std::thread::spawn;
use std::thread::sleep;
use std::time::Duration;

fn main() {

    let some_extern_var = 10;

    let my_thread_using_extern_vars = ||{
        sleep(Duration::from_millis(500));
        println!("Thread using extern");
        println!("{}", some_extern_var);
        println!("");
    };

 
    //run as normal function
    my_thread_using_extern_vars();


    println!("");
    println!("Main thread waiting...");
    println!("");
    sleep(Duration::from_millis(1200));
    println!("");
    println!("Main thread done.");
}


---------------------------------------------------------------------
-- show use of variable external to closure(thread) but within main
 func, and that we have to "move" ownership
IF we want to run a thread

use std::thread::spawn;
use std::thread::sleep;
use std::time::Duration;

fn main() {

    let some_extern_var = 10;

    let my_thread_using_extern_vars = move ||{
        sleep(Duration::from_millis(500));
        println!("Thread using extern");
        println!("{}", some_extern_var);
        println!("");
    };

 
    println!("");
    println!("Main thread starts other threads..");

    spawn(my_thread_using_extern_vars);


    println!("");
    println!("Main thread waiting...");
    println!("");
    sleep(Duration::from_millis(1200));
    println!("");
    println!("Main thread done.");
}


---------------------------------------------------------------------
-- if we move the variable from main() into global, we dont 
need a 'move'

use std::thread::spawn;
use std::thread::sleep;
use std::time::Duration;

static some_extern_var:u32 = 10;

fn main() {

    let my_thread_using_extern_vars = ||{
        sleep(Duration::from_millis(500));
        println!("Thread using extern");
        println!("{}", some_extern_var);
        println!("");
    };

 
    spawn(my_thread_using_extern_vars);


    println!("");
    println!("Main thread waiting...");
    println!("");
    sleep(Duration::from_millis(1200));
    println!("");
    println!("Main thread done.");
}



---------------------------------------------------------------------
-- global is easier?
-- example using unsafe code


use std::thread::spawn;
use std::thread::sleep;
use std::time::Duration;

static mut SOME_EXTERN_VAR:u32 = 10;

fn main() {

    let my_thread_using_extern_vars = ||{
        sleep(Duration::from_millis(500));
        println!("Thread using extern");
        unsafe {
            println!("in thread: {:?}", SOME_EXTERN_VAR);
            SOME_EXTERN_VAR = 11;
        }
        println!("");
    };

 
    spawn(my_thread_using_extern_vars);

    unsafe {
        println!("In main: {}", SOME_EXTERN_VAR);
    }


    sleep(Duration::from_millis(1200));
    unsafe {
        println!("In main: {}", SOME_EXTERN_VAR);
    }

    println!("");
    println!("Main thread waiting...");
    println!("");
    sleep(Duration::from_millis(1200));
    println!("");
    println!("Main thread done.");
}



---------------------------------------------------------------------
use std::thread::spawn;
use std::thread::sleep;
use std::time::Duration;
use lazy_static::lazy_static;
use std::sync::Mutex;


lazy_static! {
    static ref SOME_EXTERN_VAR:Mutex<u32> = Mutex::new(10);
}


fn main() {

    let my_thread_using_extern_vars = ||{
        sleep(Duration::from_millis(500));
        println!("Thread using extern");
        println!("in thread: {:?}", SOME_EXTERN_VAR.lock().unwrap());
        //SOME_EXTERN_VAR = 11;
        println!("");
    };

 
    spawn(my_thread_using_extern_vars);

    //println!("In main: {}", SOME_EXTERN_VAR);

    sleep(Duration::from_millis(1200));

    //println!("In main: {}", SOME_EXTERN_VAR);

    println!("");
    println!("Main thread waiting...");
    println!("");
    sleep(Duration::from_millis(1200));
    println!("");
    println!("Main thread done.");
}

---------------------------------------------------------------------

use std::thread::spawn;
use std::thread::sleep;
use std::time::Duration;
use lazy_static::lazy_static;
use std::sync::Mutex;


lazy_static! {
    static ref SOME_EXTERN_VAR:Mutex<u32> = Mutex::new(10);
}


fn main() {

    let my_thread_using_extern_vars = ||{
        sleep(Duration::from_millis(500));
        println!("Thread using extern");
        println!("in thread: {:?}", SOME_EXTERN_VAR.lock().unwrap());
        let mut ext = SOME_EXTERN_VAR.lock().unwrap();
        println!("in thread: {:?}", ext);
        *ext = 11;
        println!("in thread: {:?}", ext);
        println!("");
    };

 
    spawn(my_thread_using_extern_vars);

    //this insures that thread grabs extern first and modifies it.
    //if this line is commented, main might grab ext first 
    //sleep(Duration::from_millis(1200));

    let mut ext = SOME_EXTERN_VAR.lock().unwrap();
    println!("In main: {}", ext);

    sleep(Duration::from_millis(1200));

    println!("In main: {}", ext);

    println!("");
    println!("Main thread waiting...");
    println!("");
    sleep(Duration::from_millis(1200));
    println!("");
    println!("Main thread done.");
}


myuser@L07705EliezerC:~/projects/rust/threads$ cargo run
   Compiling threads v0.1.0 (/home/myuser/projects/rust/threads)
    Finished dev [unoptimized + debuginfo] target(s) in 1.99s
     Running `target/debug/threads`
In main: 10
Thread using extern
In main: 10

Main thread waiting...


Main thread done.
thread 'myuser@L07705EliezerC:~/projects/rust/threads$ cargo run
   Compiling threads v0.1.0 (/home/myuser/projects/rust/threads)
    Finished dev [unoptimized + debuginfo] target(s) in 2.02s
     Running `target/debug/threads`
Thread using extern
in thread: 10
in thread: 10
in thread: 11

In main: 11
In main: 11

Main thread waiting...


Main thread done.




