We can decide to call exit_when_full() from the query_cache...
or we can decide to call it from within the main loop before calling anything else.

if we keep running it in multithreaded mode.. we find that some times 

-- it exits from query_cache
-- it exist from main loop
-- it exists at end of main without knowing if we filled the cache.


------------------------------------------------------------------------------------

let's improve so that main waits more intelligently   AND

let's insure it always exits through bottom of main()


-- first, we can obviously remove exit code from query_cache because that seems like
a hidden side effect.

we still have the issue of it's exiting from main loop{} or, from end of main without knowing.


Next, in main loop(), we remove the check and exit.

fn main() {

    for _i in 0..num_loops {


    }

    while CACHE.lock().unwrap().len() < (num_books as usize) {
        thread::sleep(Duration::from_millis(1));
    }
}

------------------------------------------------------------------------------------
the problem with the above is that some times the cache will NOT fill and main
would wait indefinitely.  So we need a fail safe timeout.



    println!("");
    println!("");
    println!("Main is waiting....");
    let mut timed_out = false;
    let since_start_wait_for_cache_full = Instant::now();
    while CACHE.lock().unwrap().len() < (num_books as usize) {
        if since_start_wait_for_cache_full.elapsed() > Duration::from_millis(2000) {
            timed_out = true;
            break;
        }
        thread::sleep(Duration::from_millis(1));
    }
    println!("");
    if timed_out {
        println!("Main timed OUT, we may not have finished filling cache with all books.");
    } else {
        println!("Main done, cache full.");
    }
    println!("Elapsed time: {:.2?}", since_start.elapsed());
    println!("");
}






------------------------------------------------------------------------------------

Now there is an issue .   the longer the delay in the query_database, the more the probability
that it will be 
