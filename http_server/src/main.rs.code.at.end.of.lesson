
use std::net::TcpListener;
use std::net::TcpStream;
use std::io::Read;
use std::io::Write;
use std::io::Error;

const IP:&str = "localhost:8594";

fn main() {

    println!("Starting server....");

    let _listener = TcpListener::bind(IP).expect("Unable to create listener.");

    println!("{:?}", _listener);

    println!("Server listening for http://{}", IP);
    for result in _listener.incoming() {

        println!("Got incoming connection request...");

        println!("{:?}", result);

        match result {

            Ok(_stream) => {
                            println!("Handling request....{:?}", _stream);
                            let resp_result = handle_client_request(_stream);
                            match resp_result {
                                Ok(_size) => println!("{:?}", _size),
                                Err(_err) => println!("{:?}", _err)
                
                            }
                        }

            _      => println!("There was an error...")

        }

    }
}


fn handle_client_request(mut stream:TcpStream) -> Result<usize,Error>{
    println!("Handling request....{:?}", stream);

    let mut request:[u8;32] = [0;32];

    let req_result = stream.read(&mut request);
    match req_result {
        Ok(ok_var) => println!("Ok: {:?}", ok_var),
        Err(err_var) => println!("Err: {:?}", err_var),
    }

    println!("the client request: {:?}", request); 
    let message = std::str::from_utf8(&request);
    println!("req conv to str: {:?}", message.unwrap());

    let response = "HTTP/1.1 200 OK \r\n\r\n";
    let result = stream.write(response.as_bytes());
    return result;

}

