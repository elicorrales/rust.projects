/*
use std::net::TcpListener;
use std::net::TcpStream;
use std::io::Write;

const IP:&str = "localhost:8594";

fn main() {
    println!("Starting server...");

    let listener = TcpListener::bind(IP).expect("Unable to create listener.");

    println!("Server listening for http://{}", IP);

    for stream in listener.incoming() {

        println!("Got incoming connection request....{:?}", stream);

        match stream {

            Ok(stream)      => {
                            let _result = handle_incoming_connection(stream);
                            println!("Incoming connection handled: {:?}", _result); 
                        },
            Err(_e)     => {
                            println!("There was an error: {:?}", _e);
                        }
        }
    }

}

fn handle_incoming_connection(mut _stream:TcpStream) -> Result<(),()> {
    let response = "HTTP/1.1 200 OK\r\n\r\n";
    _stream.write(response.as_bytes()).expect("Error sending response.");
    _stream.flush().expect("Error flushing bytes.");
    return Ok(());
}
*/
